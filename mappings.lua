local M = {}

M.disabled = {
  n = {},
}
M.dapc = {
  n = {
["<leader>m"] = {':lua require("telescope.builtin").keymaps()<CR>', "desc" },
["<leader>h"] = {':lua require("telescope.builtin").oldfiles()<CR>', "desc" },
["<leader>n"] = {':lua require("telescope.builtin").git_files()<CR>', "desc"},
["<leader>N"] = {':lua require("telescope.builtin").git_files({git_command={"git","ls-files","--modified","--exclude-standard"}})<CR>', "desc"},
["<leader>O"] = {':lua require("telescope.builtin").find_files({hidden = true, no_ignore = true, previewer = false})<CR>', "desc"},
["<leader>fw"] = {':lua require("telescope.builtin").grep_string()<CR>', "desc"},
["<leader>fr"] = {':lua require("telescope.builtin").live_grep({cwd ="~/repos/", path_display={"truncate", shorten = {len = 1, exclude = {1,-1}}}})<CR>', "desc"},
["<leader>o"] = {':lua require("telescope.builtin").find_files({path_display={"absolute"}, previewer = false})<CR>', "desc"},
["<leader><leader>"] = {':lua require("telescope.builtin").live_grep({path_display={"truncate", shorten = {len = 3, exclude = {1,-1}}}})<CR>', "desc"},
["<leader>gp"] = {":Git push origin HEAD:refs/for/master<CR>", "desc"},
["<leader>gP"] = {":Git push<CR>", "desc"},
["<leader>gt"] = {":!alacritty &<CR>", "desc"},
["<leader>gc"] = {":Telescope git_commits<CR>", "desc"},
["<SPACE>"] = {"<Nop>", "desc"},
["<F1>"] = {"<Nop>", "desc"},
["<leader>zp"] = {":profile start nvim-profile.log | profile func * | profile file *", "desc"},
["ä"] = {"}", "desc"},
["ö"] = {"{", "desc"},
["<leader>q"] = {"<c-w>q<CR>", "desc"},
["<leader>Q"] = {":qa<CR>", "desc"},
["Qa"] = {":qa<CR>", "desc"},
["W"] = {":noautocmd w<CR>", "desc"},
["n"] ={"nzzzv", "desc"},
["N"] = {"Nzzzv", "desc"},
["<C-Left>"] = {"<C-W>h", "desc"},
["<C-Down>"] = {"<C-W>j", "desc"},
["<C-Up>"] = {"<C-W>k", "desc"},
["<C-Right>"] = {"<C-W>l", "desc"},
["<S-Right>"] = {":tabnext<CR>", "desc"},
["<S-Left>"] = {":tabprevious<CR>", "desc"},
["<leader>ch"] = {"<cmd>nohlsearch<CR>", "desc"},
["<S-Down>"] = {":m .+1<CR>==", "desc"},
["<S-Up>"] = {":m .-2<CR>==", "desc"},
["<A-a>"] = {"<C-a>", "desc"},
["<A-x>"] = {"<C-x>", "desc"},
["<leader>l"] = {":nohlsearch<CR>:diffupdate<CR>:syntax sync fromstart<CR><c-l>", "desc"},
["<C-e>"] = {":NvimTreeToggle<CR>", "desc"},
["<leader>cd"] = {"<cmd>lua vim.diagnostic.disable()<CR>", "desc"},
["<leader>ce"] = {"<cmd>lua vim.diagnostic.enable()<CR>", "desc"},
["ga"] = {":EasyAlign<CR>", "desc"},
["<Tab>"] = {"<C-t>", "desc"},
["<S-Tab>"] = {"<C-d>", "desc"},
["<q"] = {":cnext<CR>", "desc"},
[">q"] = {":cprevious<CR>", "desc"},
["<l"] = {":lnext<CR>", "desc"},
[">l"] = {":lprevious<CR>", "desc"},
["<leader>ps"] = {":PackerSync<CR>", "desc"},
["<leader>pc"] = {":PackerCompile<CR>", "desc"},
["<leader>pl"] = {":PackerClean<CR>", "desc"},
["<leader>zn"] = {":%s/\\\\n/\\r/g", "desc"},

  },
  v = {
["s"] = {'"zy:Telescope grep_string default_text=<C-r>z<cr>', "desc"},
["ä"] = {"}", "desc"},
["ö"] = {"{", "desc"},
["p"] = {'"_dP', ""},
["c"] = {'"_c', "desc"},
["<S-Down>"] = {":m '>+1<CR>gv=gv", "desc"},
["<S-Up>"] = {":m '<-2<CR>gv=gv", "desc"},
["<A-a>"] = {"<C-a>", "desc"},
["<A-x>"] = {"<C-x>", "desc"},
["<Tab>"] = {">gv", "desc"},
["<S-Tab>"] = {"<gv", "desc"},
  },
  i = {
["<C-a>"] = {"<home>", "desc"},
["<C-e>"] = {"<end>", "desc"},
["<C-v>"] = {"<esc>pa", "desc"},
["<C-E>"] = {"<Plug>luasnip-next-choice", "desc"},
["<S-Tab>"] = {"<C-d>", "desc"},
  },
  c = {
["<C-a>"] = {"<Home>", "desc"},
["<C-e>"] = {"<End>", "desc"},
["<M-Left>"] = {"<S-Left>", "desc"},
["<M-Right>"] = {"<S-Right>", "desc"},
["<M-BS>"] = {"<C-W>", "desc"},
["<C-BS>"] = {"<C-W>", "desc"},
["<C-v>"] = {"<C-r>0", "desc"},
  },
  t = {
["<Esc>"] = {"<C-\\><C-n>", "desc"},
  },
  x = {
["p"] = {"pgvy", "desc"},
["ga"] = {":EasyAlign<CR>", "desc"},
  },
  -- {"n", "<C-p>", ":Telescope projects<CR>"},
  -- {"n", "<C-f>", ':lua require("telescope.builtin").current_buffer_fuzzy_find()<CR>'},
  -- {"n", "<C-j>", ':lua require("telescope.builtin").jumplist()<CR>'},
  -- {"n", "<A-m>", ":lua require('harpoon.mark').add_file()<CR>"},
  -- {"n", "<A-l>", ":lua require('harpoon.ui').toggle_quick_menu()<CR>"},
  -- {"n", "<A-1>", ":lua require('harpoon.ui').nav_file(1)<CR>"},
  -- {"n", "<A-2>", ":lua require('harpoon.ui').nav_file(2)<CR>"},
  -- {"n", "<A-3>", ":lua require('harpoon.ui').nav_file(3)<CR>"},
  -- {"n", "<A-4>", ":lua require('harpoon.ui').nav_file(4)<CR>"},
  -- {"n", "<C-g>", ":Neogit<CR>"},
  -- {"n", "<leader>gg", ":Neogit<CR>"},
  -- {"n", "m", ':<C-U>lua require("tsht").nodes()<CR>'},
  -- {"v", "m", ':lua require("tsht").nodes()<CR>'},
  -- {"n", "f", "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, current_line_only = true })<CR>"},
  -- {"n", "F", "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, current_line_only = true })<CR>"},
  -- {"o", "f", "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, current_line_only = true, inclusive_jump = true })<CR>"},
  -- {"o", "F", "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, current_line_only = true, inclusive_jump = true })<CR>"},
  -- {"", "t", "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, current_line_only = true })<CR>"},
  -- {"", "T", "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, current_line_only = true })<CR>"},
  -- {"s", "<C-E>", "<Plug>luasnip-next-choice"},
}
return M
